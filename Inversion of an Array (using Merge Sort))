'''
Inversion Count for an array indicates â€“ how far (or close) the array is from being sorted. If array is already sorted then inversion count is 0. If array is sorted in reverse order that inversion count is the maximum.
Formally speaking, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j

Example:

Input: arr[] = {8, 4, 2, 1}
Output: 6

Explanation: Given array has six inversions:
(8,4), (4,2),(8,2), (8,1), (4,1), (2,1).


Input: arr[] = {3, 1, 2}
Output: 2

Explanation: Given array has two inversions:
(3, 1), (3, 2) 

'''
class Counter:
    def __init__(self):
        self.inv_count=0
    def add(self,val):
        self.inv_count+=val
    def get(self):
        return self.inv_count
def mergesort(arr):
    mid=len(arr)//2
    if(len(arr)==1):
        return
    else:
        lefthalf=arr[:mid]
        righthalf=arr[mid:]
        mergesort(lefthalf)
        mergesort(righthalf)
        i=0
        j=0
        k=0
        while(i<len(lefthalf)and j<len(righthalf)):
            if(lefthalf[i]<righthalf[j]):
                arr[k]=lefthalf[i]
                i+=1
            else:
                arr[k]=righthalf[j]
                j+=1
                count=mid-i
                Inv.add(count)
            k+=1
        while (i<len(lefthalf)):
            arr[k]=lefthalf[i]
            i+=1
            k+=1
        while(j<len(righthalf)):
            arr[k]=righthalf[j]
            j+=1
            k+=1
        

Inv = Counter()
arr=[8,4,2,1]
mergesort(arr)
print(Inv.get())
