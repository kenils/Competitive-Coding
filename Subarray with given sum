'''
Given an unsorted array A of size N of non-negative integers, find a continuous sub-array which adds to a given number S.

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of two lines. The first line of each test case is N and S, where N is the size of array and S is the sum. The second line of each test case contains N space separated integers denoting the array elements.

Output:
For each testcase, in a new line, print the starting and ending positions(1 indexing) of first such occuring subarray from the left if sum equals to subarray, else print -1.

Constraints:
1 <= T <= 100
1 <= N <= 107
1 <= Ai <= 1010

Example:
Input:
2
5 12
1 2 3 7 5
10 15
1 2 3 4 5 6 7 8 9 10
Output:
2 4
1 5
'''
SOLUTION:
t=int(input())
for z in range(t):
    n,s=map(int,input().strip().split())
    arr=list(map(int,input().strip().split()))
    start=0
    curr_sum=0
    flag=0
    sw={} #Declaring a dictionary to store [ prefix sum - index ] pair
    #Traversing thorugh the given array 
    for i in range(n):
        curr_sum=curr_sum+arr[i]
        
        if(s==arr[i]):
            print(i+1,i+1)#checking if required sum exists as an element
            flag=1
            break
        if(curr_sum==s):  #Here you check whether sum until now is equal to required sum
            print(1,i+1)
            flag=1
            break
        if (curr_sum-s) in sw:  #This is based on the concept that diffence of
            print(sw[curr_sum-s]+2,i+1) #two index's prefix sum is the sum of elements between that range
            flag=1
            break
        sw[curr_sum]=i
    if(flag==0):     #This simply checks for the case where no condition is satisfied.
        print(-1)


