'''
Given an array arr[] of N integers. Find the contiguous sub-array with maximum sum.

Input:
The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of the array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.

Output:
Print the maximum sum of the contiguous sub-array in a separate line for each test case.

Your Task:
Your task is to return an integer with a maximum subarray sum.

Constraints:
1 ≤ T ≤ 100
1 ≤ N ≤ 106
-107 ≤ A[i] <= 107
Sum of N over all testcases doesn't exceed 107

Example:
Input:
2
5
1 2 3 -2 5
4
-1 -2 -3 -4
Output:
9
-1

'''

Solution:
t=int(input())  #Number of testcases
for z in range(t):
    n=int(input()) #Size of array
    arr=list(map(int,input().strip().split()))
    #Example 1
    # 1 2 -2 5 7 8
    # 1 3  1 6 12 20
    #Example 2
    # 3 -4 5 -1 -2 3
    # 3 -1 5  4  2 5
    sum_so_far=0
    s=[]
    #Using Kadane's Algorithm
    for i in range(n):
        sum_so_far=sum_so_far+arr[i]
        if(arr[i]>sum_so_far):
            sum_so_far=arr[i]
        s.append(sum_so_far)    
    print("Maximum Sum=",max(s))
