'''
In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:



Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
'''
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        Q=[]
        count=0
        time_frame=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if(grid[i][j]==2):
                    Q.append((i,j))
                if(grid[i][j]==1):
                    count+=1
        while(len(Q)!=0):
            for _ in range(len(Q)):
                i,j=Q.pop(0)
                for x,y in [[i+1,j],[i-1,j],[i,j+1],[i,j-1]]:
                    if(0<=x<len(grid) and 0<=y<len(grid[0]) and grid[x][y]==1):
                        grid[x][y]=2
                        count-=1
                        Q.append((x,y))
            time_frame+=1
        if(count==0):
            return max(0,time_frame-1)
        else:
            return -1
