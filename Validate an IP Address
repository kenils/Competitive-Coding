'''
Write a program to Validate an IPv4 Address. According to Wikipedia, IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots, e.g., 172.16.254.1 . The generalized form of an IPv4 address is (0-255).(0-255).(0-255).(0-255). Here we are considering numbers only from 0 to 255 and any additional leading zeroes will be considered invalid.

Your task is  to complete the function isValid which returns 1 if the ip address is valid else returns 0. The function takes a string ip as its only argument .

Input:
The first line of each test case contains an integer T denoting the number of test case . Then T test cases follow . Each test case takes a string ip.

Output:
For each test case output will be 1 if the string is a valid ip address else 0.

Constraints:
1<=T<=100
1<=length of string <=50

Example(To be used only for expected output) :
Input
4
222.111.111.111
5555..555
0000.0000.0000.0000
1.2.3.04

Output
1
0
0
0
'''
Solution:

def check(temp):
    if(len(temp)==0): #Checking for empty string
        return False    
    for i in range(len(temp)):
        if(ord(temp[i])>=97 and ord(temp[i])<=122): #Checking for characters
            return False
    flagz=0
    if(int(temp)>255 or int(temp)<0): #Checking for range[0-255]
        return False
    for i in range(len(temp)):
        if(temp[i]=='0' and flagz==0):     #The first encountered zero can be considered
            flagz=1
            continue
        if(temp[i]!='.' and flagz==1):    #But no digit should have a leading zero
            return False
    return True    
def isValidIP(s):
    j=0
    dot_count=0  # To take into account the number of dots
    for i in range(len(s)):
        if(s[i]=='.'):
            dot_count+=1
            temp=s[j:i]
            j=i+1
            if(not check(temp)):
                return False
    if(dot_count!=3):
        return False    
    temp=s[j:i+1]
    if(not check(temp)):
        return False
    return True
