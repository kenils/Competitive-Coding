'''
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

NOTE: This code only contains the main logic of the problem
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> int:
        d={}
        curr_sum=0
        d[0]=1
        self.counter=0
 
        def search_sum(node,curr_sum,sum):
            if(not node):
                return
            if((curr_sum+node.val-sum) in d):
                #print("I was called at ",node.val)
                self.counter+=d[(curr_sum+node.val-sum)]
            d.setdefault(curr_sum+node.val,0)
            d[curr_sum+node.val]+=1
            search_sum(node.left,curr_sum+node.val,sum)
            search_sum(node.right,curr_sum+node.val,sum)
            d[curr_sum+node.val]-=1
            if(d[curr_sum+node.val]==0):
                del d[curr_sum+node.val]
            
            
                
        search_sum(root,curr_sum,sum)
        
        
        
        return self.counter
            

            
            
        
        


