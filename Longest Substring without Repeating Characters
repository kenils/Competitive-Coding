'''
Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
'''
def lengthOfLongestSubstring(self, s: str) -> int:
    if(len(s)==0):
        return 0
    if(len(s)==1):
        return 1
    count=0
    max_count=0
    d={}
    i=0
    start=0
    while i < len(s):
        if(s[i] not in d):
            count+=1
        else:
            start=max(start,d[s[i]])
            count=i-start
        d[s[i]]=i
        i+=1
        if(count>max_count):
            max_count=count

    return max_count
